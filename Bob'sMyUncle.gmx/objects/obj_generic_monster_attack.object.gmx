<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_generic_monster</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>.3</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Part of ENEMY AI Attacking
// This has got to be the biggest pile of mess of an AI ever written.

// check monster hp before doing anything else
if (monster_hp &gt; 0) {
    if (object_exists(obj_player.object_index)) {
    // check if we are within range of attack distance, if not stalk player and get back into attack distance
    if (distance_to_object(obj_player) &gt; attackDistance) {
        // get player cords
        if (obj_player.x &lt;= x) {
            // move LEFT towards player
            hspeed = -2;
        }
        else{
            // flip default sprite on x axis. Mirror horizontal.
            image_xscale = -1;
            // move RIGHT towards player
            hspeed = 2;
        }
    }else {
        hspeed = 0;    
    }
    }
    
    if (distance_to_object(obj_player) &gt; aggroRange) { // revert back to alert object and find player or chill out
        var _objName = object_get_name(object_index);

        if (_objName == "obj_skeleton_attack") {
            instance_change(obj_skeleton_alert, true);
        }
        else if (_objName == "obj_slime_attack") {
            instance_change(obj_slime_alert, true);
        }
    }
    
    // take damage from player sprite 2 and 3 left and right
    if (collision_circle(x,y,15,obj_player,false,true)) &amp;&amp; (obj_player.sprite_index == 2) || (obj_player.sprite_index == 3) {
        monster_hp = monster_hp - 25;
        
        var _objName = object_get_name(object_index);

        if (_objName == "obj_skeleton_attack") || (_objName == "obj_skeleton_alert") {
            sprite_index = spr_skeleton_hit;
        }
        else if (_objName == "obj_slime_attack") || (_objName == "obj_slime_alert") {
            sprite_index = spr_slime_attack
        }
    }
}
else {
// if monster is dead play the dead sprite and kill off instance of monster    
    var _objName = object_get_name(object_index);

    if (_objName == "obj_skeleton_attack") || (_objName == "obj_skeleton_alert") {
        instance_change(obj_skeleton_dead, true);
    }
    else if (_objName == "obj_slime_attack") || (_objName == "obj_slime_alert") {
        instance_change(obj_slime_dead, true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
